console.log("Js dosyasÄ± baÄŸlandÄ±.");
//?         ğŸ”¥ğŸ”¥ğŸ”¥       Operators           ğŸ”¥ğŸ”¥ğŸ”¥

//! Atama OperatÃ¶rÃ¼, Aritmetiksel OperatÃ¶rler,ArtÄ±rma ve Azaltma OperatÃ¶rÃ¼, KarÅŸÄ±laÅŸtÄ±rma OperatÃ¶rleri ve Logical(MantÄ±ksal) OperatÃ¶rler

var deneme = 5;
varDeneme = 6;

let myVar = 5;

const myVar1 = 6;

//+ Aritmetiksel OperatÃ¶rler

// +,-,*,/,%
//! + operatÃ¶rÃ¼
// const num1 = 10;
// const num2 = 69;

// const toplam = num1 + num2; // num1 ve num2 operand , + operator olark adlandÄ±rÄ±lÄ±yor.

// console.log(toplam);

// const msg1 = "Hello";
// const msg2 = "World!";

// const mesaj = msg1 + msg2;
// console.log(mesaj);

// const firstName = "Koray";
// const lastName = "Koksal";
// console.log(firstName, lastName); // consoleda virgÃ¼l ile deÄŸiÅŸkenleri yazdÄ±rÄ±rken virgÃ¼l boÅŸluk karakateri gibi davranÄ±r.
// const fullName = firstName + " " + lastName; //? + operatÃ¶rÃ¼ String Concatenation iÅŸlemini de yapar.
// console.log(fullName);

// //! Template Literals (Es6 ile gelen bir Ã¶zellik)
// // `merhaba``${deÄŸiÅŸken} ${deÄŸiÅŸken2}`;
// // `merhaba` hem string tanÄ±mlamasÄ± yapabiliriz hem de string iÃ§inde deÄŸiÅŸkenlerimizi `${deÄŸiÅŸken}` ÅŸeklinde yazabiliriz. + yerine daha dinamik bir ÅŸekilde stringlerimizi concatenate edebiliriz.

// const fullName2 = `${firstName} ${lastName}`;
// console.log(fullName2);

// const num3 = "6";
// const num4 = "7";
// console.log(num3 + num4); // 67
// console.log(num3 + 7); // 67. js otomatik tip dÃ¶nÃ¼ÅŸÃ¼mÃ¼ yaparak buradaki ifadeyi de concatenat etti.
// console.log(7 + num3); // + operatorunde string deÄŸiÅŸken Ã¼stÃ¼n gelir ve dÃ¶nmÃ¼ÅŸÃ¼mÃ¼ stringe yapar. 76 Ã§Ä±ktÄ±sÄ±nÄ± verdi.
// console.log(typeof (7 + num3)); // string

//! - operatÃ¶rÃ¼

// const x = 55;
// const y = 44;

// console.log(x - y); // 11

// const myNum = "1";
// console.log(x - myNum); // 54. - operatÃ¶rÃ¼nde string deÄŸiÅŸkeni numbera Ã§evirir.
// const yourNum = "one";
// console.log(x - yourNum); // NaN (Not a Number)
// //? String ifadeyi number a dÃ¶nÃ¼ÅŸtÃ¼rmeye Ã§alÄ±ÅŸÄ±yor ama bu mÃ¼mkÃ¼n olmadÄ±ÄŸÄ± iÃ§in dÃ¶nÃ¼ÅŸtÃ¼remiyor ve bu nedenle iÅŸlemin sonucunu NaN dÃ¶ndÃ¼rÃ¼yor.matematiksel olarak belirsiz veya tanÄ±msÄ±z bir deÄŸeri temsil eder.
// console.log(x - "a"); // NaN

//! * operatÃ¶rÃ¼

let carp1 = 7;
let carp2 = 9;
console.log(carp1 * carp2); // 63

console.log("a" * "b"); // NaN
console.log("a" * 3); // NaN

console.log("5" * "9"); // 45. karakterler numeric ise numebr gibi davranarak iÅŸlemi gerÃ§ekleÅŸtiriyor.
console.log(typeof ("5" * "9")); // number

//! / operatÃ¶rÃ¼

const bÃ¶l1 = 81;
const bÃ¶l2 = 9;

console.log(bÃ¶l1 / bÃ¶l2); // 9

console.log(bÃ¶l1 / "9"); // 9
console.log(bÃ¶l1 / "dokuz"); // NaN

console.log(bÃ¶l2 / 0); // Infinity
console.log(-61 / 0); // -Infinity
//? JavaScript ile sonsuzluk-sÄ±nÄ±r deÄŸerini ifade etmek iÃ§in Infinity veya -Infinity anahtar kelimesi kullanÄ±lÄ±r. Bir sayÄ±nÄ±n 0'a bÃ¶lÃ¼nmesi Infinity veya â€“Infinity deÄŸeri dÃ¶ndÃ¼rÃ¼r.

console.log(0 / 5); // 0
